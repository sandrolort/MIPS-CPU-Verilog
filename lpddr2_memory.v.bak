module lpddr2_memory (
    // Clock inputs
    input wire CLOCK_50_B5B,
    input wire CLOCK_50_B6A,
    
    // Reset input
    input wire CPU_RESET_n,
    
    // LPDDR2 interface
    output wire [9:0] DDR2LP_CA,
    output wire [1:0] DDR2LP_CKE,
    output wire DDR2LP_CK_n,
    output wire DDR2LP_CK_p,
    output wire [1:0] DDR2LP_CS_n,
    output wire [3:0] DDR2LP_DM,
    inout wire [31:0] DDR2LP_DQ,
    inout wire [3:0] DDR2LP_DQS_n,
    inout wire [3:0] DDR2LP_DQS_p,
    input wire DDR2LP_OCT_RZQ,
    
    // User interface
    input wire [26:0] user_address,
    input wire [31:0] user_write_data,
    input wire user_read_req,
    input wire user_write_req,
    output wire [31:0] user_read_data,
    output wire user_data_valid,
    output wire user_wait_request
);

    // Internal signals
    wire afi_clk;
    wire afi_half_clk;
    wire local_init_done;
    wire local_cal_success;
    wire local_cal_fail;
    wire avl_ready;
    wire [26:0] avl_addr;
    wire [31:0] avl_rdata;
    wire avl_rdata_valid;
    wire [31:0] avl_wdata;
    wire avl_read_req;
    wire avl_write_req;
    wire avl_burstbegin;

    // State machine
    reg [2:0] state;
    localparam IDLE = 3'd0,
               WAIT_INIT = 3'd1,
               WRITE = 3'd2,
               READ = 3'd3,
               WAIT_READ = 3'd4;

    // State machine logic
    always @(posedge afi_clk or negedge CPU_RESET_n) begin
        if (!CPU_RESET_n) begin
            state <= WAIT_INIT;
            avl_read_req <= 1'b0;
            avl_write_req <= 1'b0;
            avl_addr <= 27'd0;
            avl_wdata <= 32'd0;
        end else begin
            case (state)
                WAIT_INIT: begin
                    if (local_init_done && local_cal_success)
                        state <= IDLE;
                end
                IDLE: begin
                    if (user_write_req) begin
                        state <= WRITE;
                        avl_addr <= user_address;
                        avl_wdata <= user_write_data;
                        avl_write_req <= 1'b1;
                    end else if (user_read_req) begin
                        state <= READ;
                        avl_addr <= user_address;
                        avl_read_req <= 1'b1;
                    end
                end
                WRITE: begin
                    if (avl_ready) begin
                        avl_write_req <= 1'b0;
                        state <= IDLE;
                    end
                end
                READ: begin
                    if (avl_ready) begin
                        avl_read_req <= 1'b0;
                        state <= WAIT_READ;
                    end
                end
                WAIT_READ: begin
                    if (avl_rdata_valid)
                        state <= IDLE;
                end
                default: state <= IDLE;
            endcase
        end
    end

    // Output assignments
    assign user_wait_request = (state != IDLE) || !local_init_done || !local_cal_success;
    assign user_data_valid = (state == WAIT_READ) && avl_rdata_valid;
    assign user_read_data = avl_rdata;

    // LPDDR2 controller instantiation
    fpga_lpddr2 fpga_lpddr2_inst (
        .pll_ref_clk(CLOCK_50_B5B),
        .global_reset_n(CPU_RESET_n),
        .soft_reset_n(CPU_RESET_n),
        .afi_clk(afi_clk),
        .afi_half_clk(afi_half_clk),
        .afi_reset_n(),
        .afi_reset_export_n(),
        .mem_ca(DDR2LP_CA),
        .mem_ck(DDR2LP_CK_p),
        .mem_ck_n(DDR2LP_CK_n),
        .mem_cke(DDR2LP_CKE),
        .mem_cs_n(DDR2LP_CS_n),
        .mem_dm(DDR2LP_DM),
        .mem_dq(DDR2LP_DQ),
        .mem_dqs(DDR2LP_DQS_p),
        .mem_dqs_n(DDR2LP_DQS_n),
        .avl_ready_0(avl_ready),
        .avl_burstbegin_0(avl_burstbegin),
        .avl_addr_0(avl_addr),
        .avl_rdata_valid_0(avl_rdata_valid),
        .avl_rdata_0(avl_rdata),
        .avl_wdata_0(avl_wdata),
        .avl_be_0(4'hF),
        .avl_read_req_0(avl_read_req),
        .avl_write_req_0(avl_write_req),
        .avl_size_0(3'b001),
        .mp_cmd_clk_0_clk(afi_half_clk),
        .mp_cmd_reset_n_0_reset_n(CPU_RESET_n),
        .mp_rfifo_clk_0_clk(afi_half_clk),
        .mp_rfifo_reset_n_0_reset_n(CPU_RESET_n),
        .mp_wfifo_clk_0_clk(afi_half_clk),
        .mp_wfifo_reset_n_0_reset_n(CPU_RESET_n),
        .local_init_done(local_init_done),
        .local_cal_success(local_cal_success),
        .local_cal_fail(local_cal_fail),
        .oct_rzqin(DDR2LP_OCT_RZQ)
    );

    // Burst signal generation
    assign avl_burstbegin = avl_read_req || avl_write_req;

endmodule