module memory_full (
	input clk, rst, S,
	input [0:31] next_pc,
	input [0:29] addr_in,
	input [0:31] data_in,
	output wire [0:31] I,
	output reg [0:31] PC,
	output [0:31] data_out,
	output reg E
);

reg [0:31] Memory [0:255];
wire[0:29] ad;
assign ad = E ? addr_in : PC[0:29];
wire wren;
assign wren = S && E;
//Potentially, an SRAM can be implemented like this, however the circuit is pretty complex already.
// RAM rm(
// ad[20:29],
// clk2,
// data_in,
// wren,
// data_out
// );
//Reading from files is also an option, but that's least of my concerns right now.
always @(posedge clk && wren, posedge rst) begin
		if(rst) begin : rstStmt
		integer i;
		Memory[0] = 32'b00100100000001000000000000000110;
		Memory[1] = 32'b00100100000000010000000000000000;
		Memory[2] = 32'b00100100000000100000000000000000;
		Memory[3] = 32'b00100100001000010000000000000001;
		Memory[4] = 32'b00000000010000010001000000100001;
		Memory[5] = 32'b00010100001001001111111111111110;
		Memory[6] = 32'b00000000010000000010100000100001;
		
		for (i = 7; i < 64 ; i=i+1) begin
			Memory[i] = 32'b0;
		end
	end
	else Memory [ad[21:29]] = data_in;
end
assign data_out = Memory[ad[21:29]];

//Testing
always @(posedge wren) #1 $display("Writing in memory..... %0d, %0d", ad, data_in);
always @(negedge wren) #1 $display("Reading from memory... %0d, %0d", ad, data_out);

//E register driver
always @(posedge clk, posedge rst) E <= rst ? 1'b0 : ~E;

//PC driver (makes sure PC doesn't increase on every cycle)
always @(posedge rst, posedge E) PC <= rst ? 32'b0 : next_pc;

//I driver
//The following Line of code is compiled wrong. Quartus doesn't recognize E as a clock driver in hardware synthesis, while it works in ModelSim simulation.
//always @(posedge ~E, posedge rst) I = rst ? 1'b0 : Memory[ad[23:29]];
//Due to that reason, I had to recreate a "posedge ~E" statement manually, using up an additional register unfortunately. This, however, fixed the processor.

reg prev = 0;
reg [0:31] previ = 0;

always @(posedge clk) prev <= E;
always @(I) previ <= I;

assign I = rst ? 1'b0 : prev != E && E == 0? Memory[ad[21:29]] : previ;

endmodule