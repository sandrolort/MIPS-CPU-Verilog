module shifter (
	input [0:1] funct,
	input [0:31] a,
	input [0:4] N,
	output reg [0:31] R
);
always @(funct, a, N, R) begin
	case (funct)
		2'b00: R = a << N;
		2'b01: R = a >> N;
		2'b10: begin : shifterLoop
			//num doesn't get synthesized, doesn't take up registers.
			//Itâ€™s just used to simplify the code.
			integer num;
			R = a>>N;
			for (num = 0; num < 32; num = num + 1) begin
				if (num <= N) R[num] = a[0];
				else R[num] = a[num-N];
			end
		end
		default: R = 0;
	endcase
end
endmodule